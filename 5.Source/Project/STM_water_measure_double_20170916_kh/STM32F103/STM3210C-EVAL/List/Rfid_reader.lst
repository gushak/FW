###############################################################################
#
# IAR ANSI C/C++ Compiler V8.22.1.15669/W32 for ARM       24/May/2019  11:08:40
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\12.@@@@@@@\5.Source\Project\STM_water_measure_double_20170916_kh\STM32F103\Rfid_reader.c
#    Command line =  
#        -f C:\Users\dawoon1\AppData\Local\Temp\EWF948.tmp
#        (D:\12.@@@@@@@\5.Source\Project\STM_water_measure_double_20170916_kh\STM32F103\Rfid_reader.c
#        -D USE_STDPERIPH_DRIVER -D STM32F10X_MD -D USE_STM3210C_EVAL -lcN
#        D:\12.@@@@@@@\5.Source\Project\STM_water_measure_double_20170916_kh\STM32F103\STM3210C-EVAL\List
#        --diag_suppress pa082 -o
#        D:\12.@@@@@@@\5.Source\Project\STM_water_measure_double_20170916_kh\STM32F103\STM3210C-EVAL\Obj
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0_2\arm\INC\c\DLib_Config_Full.h" -I
#        D:\12.@@@@@@@\5.Source\Project\STM_water_measure_double_20170916_kh\STM32F103\
#        -I
#        D:\12.@@@@@@@\5.Source\Project\STM_water_measure_double_20170916_kh\STM32F103\..\..\..\Libraries\CMSIS\CM3\CoreSupport\
#        -I
#        D:\12.@@@@@@@\5.Source\Project\STM_water_measure_double_20170916_kh\STM32F103\..\..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\
#        -I
#        D:\12.@@@@@@@\5.Source\Project\STM_water_measure_double_20170916_kh\STM32F103\..\..\..\Libraries\STM32F10x_StdPeriph_Driver\inc\
#        -I
#        D:\12.@@@@@@@\5.Source\Project\STM_water_measure_double_20170916_kh\STM32F103\..\..\..\Utilities\STM32_EVAL\
#        -I
#        D:\12.@@@@@@@\5.Source\Project\STM_water_measure_double_20170916_kh\STM32F103\..\..\..\Utilities\STM32_EVAL\Common\
#        -I
#        D:\12.@@@@@@@\5.Source\Project\STM_water_measure_double_20170916_kh\STM32F103\..\..\..\Utilities\STM32_EVAL\STM3210C_EVAL\
#        -Ohs --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 8.0_2\arm\CMSIS\Core\Include\" -I "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.0_2\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  
#        D:\12.@@@@@@@\5.Source\Project\STM_water_measure_double_20170916_kh\STM32F103\STM3210C-EVAL\List\Rfid_reader.lst
#    Object file  =  
#        D:\12.@@@@@@@\5.Source\Project\STM_water_measure_double_20170916_kh\STM32F103\STM3210C-EVAL\Obj\Rfid_reader.o
#
###############################################################################

D:\12.@@@@@@@\5.Source\Project\STM_water_measure_double_20170916_kh\STM32F103\Rfid_reader.c
      1          #include "hw_control.h"
      2          
      3          #define RFID_BUFFER_SIZE 512
      4          
      5          __IO uint16_t RFID_rx_buffer[RFID_BUFFER_SIZE];
      6          uint32_t RFID_rx_point_head = 0, RFID_rx_point_tail = 0;
      7          
      8          void init_rf_buffer(void)
      9          {
     10          	memset((uint8_t*)RFID_rx_buffer, 0x00, 512);
     11          	RFID_rx_point_head = 0;
     12          	RFID_rx_point_tail = 0;
     13          }
     14          void increase_RF_point_value(u32 *p)
     15          {
     16          	(*p)++;
     17          	if(RFID_BUFFER_SIZE == (*p))
     18          	{
     19          		(*p) = 0; 
     20          	}
     21          }
     22          
     23          uint8_t rfid_is_empty(void)
     24          {
     25          	if(RFID_rx_point_head == RFID_rx_point_tail) 
     26            {
     27          		return 1; 
     28          	}
     29          	return 0;
     30          }
     31          
     32          u16 rfid_dequeue(void)
     33          {
     34          	u8 rev = RFID_rx_buffer[RFID_rx_point_tail];
     35          	increase_RF_point_value(&RFID_rx_point_tail);
     36          	return rev;
     37          }
     38          
     39          
     40          void rfid_enqueue(u16 data)
     41          {
     42          	RFID_rx_buffer[RFID_rx_point_head] = data;
     43          	increase_RF_point_value(&RFID_rx_point_head);  
     44          }
     45          
     46          void parse_rfid_08IMF(uint8_t c)
     47          {
     48          	static uint8_t rf_status2 = 0;
     49          	static uint8_t rf_buf2[8];
     50          	static uint8_t rf_buf2_cnt = 0;
     51          	uint32_t value = 0;
     52          		
     53          	switch(rf_status2)
     54          	{
     55          		case 0:                                                                                                    
     56          			if(c == 0x02) 
     57                {	
     58          				rf_status2 = 1;
     59          				rf_buf2_cnt = 0;
     60          			}
     61          			break;
     62          			
     63          		case 1:
     64          			if(c == 0x03)
     65                {	
     66          				//@@@ @@@ @@@ 
     67          				if(rf_buf2_cnt == 8)
     68                  {
     69          					//@@@ @@
     70          					
     71          					value = (rf_buf2[3]-0x30) * 10000;	
     72          					value += (rf_buf2[4]-0x30) * 1000;		
     73          					value += (rf_buf2[5]-0x30) * 100;	
     74          					value += (rf_buf2[6]-0x30) * 10;		
     75          					value += (rf_buf2[7]-0x30) ;					
     76          					
     77          					if(value <= 65535) 
     78                    {		
     79          							rfid_enqueue(value);
     80          					}					
     81          				}
     82          				
     83          				rf_status2 = 0;			
     84          				
     85          			} 
     86                else 
     87                {
     88          				if(rf_buf2_cnt < 8) 
     89                  {							//@@ 8@@ @@
     90          					if(c >= 0x30 && c <= 0x39) 
     91                    {		//@@@ @@@@@
     92          						rf_buf2[rf_buf2_cnt++] = c;
     93          					}	
     94          				}				
     95          			}
     96          			break;
     97          			
     98          		default :
     99          			rf_status2 = 0; 
    100          			break;			
    101          	}		
    102          }
    103          
    104          static uint32_t rf_buf[40];
    105          void parse_rfid(uint8_t c)
    106          {
    107          	static uint8_t rf_status = 0;
    108            	static uint16_t rf_buf_cnt = 0;
    109          	uint32_t value = 0;
    110            
    111          	switch(rf_status)
    112          	{
    113          		case 0:		
    114          			if(c == 0x02) rf_status = 1;
    115          			break;			
    116          		case 1:		
    117          			if(c >= 0x30  && c <= 0x39)  rf_status = 2;
    118          			else rf_status = 0;
    119          			break;	
    120          			
    121          		case 2:		
    122          			if(c >= 0x30  && c <= 0x39)  rf_status = 3;
    123          			else rf_status = 0;
    124          			break;	
    125          		case 3:		
    126          			if(c >= 0x30  && c <= 0x39)  rf_status = 4;
    127          			else rf_status = 0;
    128          			break;	
    129          		case 4:		
    130          			if(c >= 0x30  && c <= 0x39)  rf_status = 5;
    131          			else rf_status = 0;
    132          			break;	
    133          		case 5:		
    134          			if(c >= 0x30  && c <= 0x39)  rf_status = 6;
    135          			else rf_status = 0;
    136          			break;
    137          		case 6:		
    138          			if(c >= 0x30  && c <= 0x39)  rf_status = 7;
    139          			else rf_status = 0;
    140          			break;	
    141          		case 7:		
    142          			if(c >= 0x30  && c <= 0x39)  rf_status = 8;
    143          			else rf_status = 0;
    144          			break;
    145          		case 8:		
    146          			if(c >= 0x30  && c <= 0x39)  rf_status = 9;
    147          			else rf_status = 0;
    148          			break;			
    149          		case 9:		
    150          			if(c >= 0x30  && c <= 0x39) 
    151                		{
    152          				rf_status = 10;
    153          				rf_buf_cnt = 0;
    154          				memset((void *)&rf_buf, 0, sizeof(rf_buf));
    155          			}
    156          			else 
    157                  	rf_status = 0;
    158               	 	break;	
    159          			
    160          		case 10:	
    161          				if(c > 0x30 && c <= 0x39)
    162          				{
    163          					value = c & 0x0F;
    164          					rfid = value;		
    165          					rf_buf_cnt = 0;
    166          					rf_status = 0;
    167          				}
    168          			break;	
    169          			
    170          		default : 
    171          			rf_buf_cnt = 0;
    172          			rf_status = 0;
    173          			break;
    174          		}				
    175          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   increase_RF_point_value
       8   init_rf_buffer
         8   -> __aeabi_memclr4
       0   parse_rfid
         0   -> __aeabi_memclr4
      12   parse_rfid_08IMF
       0   rfid_dequeue
       0   rfid_enqueue
       0   rfid_is_empty


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
      16  increase_RF_point_value
      28  init_rf_buffer
     152  parse_rfid
     160  parse_rfid_08IMF
    1044  rf_buf2
          rf_status2
          rf_buf2_cnt
          RFID_rx_buffer
          RFID_rx_point_head
          RFID_rx_point_tail
       2  rf_buf_cnt
     164  rf_status
          rf_buf
      30  rfid_dequeue
      28  rfid_enqueue
      22  rfid_is_empty

 
 1 210 bytes in section .bss
   448 bytes in section .text
 
   448 bytes of CODE memory
 1 210 bytes of DATA memory

Errors: none
Warnings: 1
