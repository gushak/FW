###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       24/Apr/2019  16:42:21
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\12.물섭취량조사기\5.Source\Libraries\STM32F10x_StdPeriph_Driver\src\stm32f10x_rtc.c
#    Command line =  
#        D:\12.물섭취량조사기\5.Source\Libraries\STM32F10x_StdPeriph_Driver\src\stm32f10x_rtc.c
#        -D USE_STDPERIPH_DRIVER -D STM32F10X_MD -D USE_STM3210C_EVAL -lcN
#        D:\12.물섭취량조사기\5.Source\Project\backup\STM32F103\STM3210C-EVAL\List
#        --diag_suppress pa082 -o
#        D:\12.물섭취량조사기\5.Source\Project\backup\STM32F103\STM3210C-EVAL\Obj
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\INC\c\DLib_Config_Full.h" -I
#        D:\12.물섭취량조사기\5.Source\Project\backup\STM32F103\ -I
#        D:\12.물섭취량조사기\5.Source\Project\backup\STM32F103\..\..\..\Libraries\CMSIS\CM3\CoreSupport\
#        -I
#        D:\12.물섭취량조사기\5.Source\Project\backup\STM32F103\..\..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\
#        -I
#        D:\12.물섭취량조사기\5.Source\Project\backup\STM32F103\..\..\..\Libraries\STM32F10x_StdPeriph_Driver\inc\
#        -I
#        D:\12.물섭취량조사기\5.Source\Project\backup\STM32F103\..\..\..\Utilities\STM32_EVAL\
#        -I
#        D:\12.물섭취량조사기\5.Source\Project\backup\STM32F103\..\..\..\Utilities\STM32_EVAL\Common\
#        -I
#        D:\12.물섭취량조사기\5.Source\Project\backup\STM32F103\..\..\..\Utilities\STM32_EVAL\STM3210C_EVAL\
#        -Ohs --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.5\arm\CMSIS\Include\"
#    Locale       =  Korean_Korea.949
#    List file    =  
#        D:\12.물섭취량조사기\5.Source\Project\backup\STM32F103\STM3210C-EVAL\List\stm32f10x_rtc.lst
#    Object file  =  
#        D:\12.물섭취량조사기\5.Source\Project\backup\STM32F103\STM3210C-EVAL\Obj\stm32f10x_rtc.o
#
###############################################################################

D:\12.물섭취량조사기\5.Source\Libraries\STM32F10x_StdPeriph_Driver\src\stm32f10x_rtc.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f10x_rtc.c
      4            * @author  MCD Application Team
      5            * @version V3.5.0
      6            * @date    11-March-2011
      7            * @brief   This file provides all the RTC firmware functions.
      8            ******************************************************************************
      9            * @attention
     10            *
     11            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     12            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     13            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     14            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     15            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     16            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     17            *
     18            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     19            ******************************************************************************
     20            */
     21          
     22          /* Includes ------------------------------------------------------------------*/
     23          #include "stm32f10x_rtc.h"
     24          
     25          /** @addtogroup STM32F10x_StdPeriph_Driver
     26            * @{
     27            */
     28          
     29          /** @defgroup RTC 
     30            * @brief RTC driver modules
     31            * @{
     32            */
     33          
     34          /** @defgroup RTC_Private_TypesDefinitions
     35            * @{
     36            */ 
     37          /**
     38            * @}
     39            */
     40          
     41          /** @defgroup RTC_Private_Defines
     42            * @{
     43            */
     44          #define RTC_LSB_MASK     ((uint32_t)0x0000FFFF)  /*!< RTC LSB Mask */
     45          #define PRLH_MSB_MASK    ((uint32_t)0x000F0000)  /*!< RTC Prescaler MSB Mask */
     46          
     47          /**
     48            * @}
     49            */
     50          
     51          /** @defgroup RTC_Private_Macros
     52            * @{
     53            */
     54          
     55          /**
     56            * @}
     57            */
     58          
     59          /** @defgroup RTC_Private_Variables
     60            * @{
     61            */
     62          
     63          /**
     64            * @}
     65            */
     66          
     67          /** @defgroup RTC_Private_FunctionPrototypes
     68            * @{
     69            */
     70          
     71          /**
     72            * @}
     73            */
     74          
     75          /** @defgroup RTC_Private_Functions
     76            * @{
     77            */
     78          
     79          /**
     80            * @brief  Enables or disables the specified RTC interrupts.
     81            * @param  RTC_IT: specifies the RTC interrupts sources to be enabled or disabled.
     82            *   This parameter can be any combination of the following values:
     83            *     @arg RTC_IT_OW: Overflow interrupt
     84            *     @arg RTC_IT_ALR: Alarm interrupt
     85            *     @arg RTC_IT_SEC: Second interrupt
     86            * @param  NewState: new state of the specified RTC interrupts.
     87            *   This parameter can be: ENABLE or DISABLE.
     88            * @retval None
     89            */
     90          void RTC_ITConfig(uint16_t RTC_IT, FunctionalState NewState)
     91          {
     92            /* Check the parameters */
     93            assert_param(IS_RTC_IT(RTC_IT));  
     94            assert_param(IS_FUNCTIONAL_STATE(NewState));
     95            
     96            if (NewState != DISABLE)
     97            {
     98              RTC->CRH |= RTC_IT;
     99            }
    100            else
    101            {
    102              RTC->CRH &= (uint16_t)~RTC_IT;
    103            }
    104          }
    105          
    106          /**
    107            * @brief  Enters the RTC configuration mode.
    108            * @param  None
    109            * @retval None
    110            */
    111          void RTC_EnterConfigMode(void)
    112          {
    113            /* Set the CNF flag to enter in the Configuration Mode */
    114            RTC->CRL |= RTC_CRL_CNF;
    115          }
    116          
    117          /**
    118            * @brief  Exits from the RTC configuration mode.
    119            * @param  None
    120            * @retval None
    121            */
    122          void RTC_ExitConfigMode(void)
    123          {
    124            /* Reset the CNF flag to exit from the Configuration Mode */
    125            RTC->CRL &= (uint16_t)~((uint16_t)RTC_CRL_CNF); 
    126          }
    127          
    128          /**
    129            * @brief  Gets the RTC counter value.
    130            * @param  None
    131            * @retval RTC counter value.
    132            */
    133          uint32_t RTC_GetCounter(void)
    134          {
    135            uint16_t tmp = 0;
    136            tmp = RTC->CNTL;
    137            return (((uint32_t)RTC->CNTH << 16 ) | tmp) ;
    138          }
    139          
    140          /**
    141            * @brief  Sets the RTC counter value.
    142            * @param  CounterValue: RTC counter new value.
    143            * @retval None
    144            */
    145          void RTC_SetCounter(uint32_t CounterValue)
    146          { 
    147            RTC_EnterConfigMode();
    148            /* Set RTC COUNTER MSB word */
    149            RTC->CNTH = CounterValue >> 16;
    150            /* Set RTC COUNTER LSB word */
    151            RTC->CNTL = (CounterValue & RTC_LSB_MASK);
    152            RTC_ExitConfigMode();
    153          }
    154          
    155          /**
    156            * @brief  Sets the RTC prescaler value.
    157            * @param  PrescalerValue: RTC prescaler new value.
    158            * @retval None
    159            */
    160          void RTC_SetPrescaler(uint32_t PrescalerValue)
    161          {
    162            /* Check the parameters */
    163            assert_param(IS_RTC_PRESCALER(PrescalerValue));
    164            
    165            RTC_EnterConfigMode();
    166            /* Set RTC PRESCALER MSB word */
    167            RTC->PRLH = (PrescalerValue & PRLH_MSB_MASK) >> 16;
    168            /* Set RTC PRESCALER LSB word */
    169            RTC->PRLL = (PrescalerValue & RTC_LSB_MASK);
    170            RTC_ExitConfigMode();
    171          }
    172          
    173          /**
    174            * @brief  Sets the RTC alarm value.
    175            * @param  AlarmValue: RTC alarm new value.
    176            * @retval None
    177            */
    178          void RTC_SetAlarm(uint32_t AlarmValue)
    179          {  
    180            RTC_EnterConfigMode();
    181            /* Set the ALARM MSB word */
    182            RTC->ALRH = AlarmValue >> 16;
    183            /* Set the ALARM LSB word */
    184            RTC->ALRL = (AlarmValue & RTC_LSB_MASK);
    185            RTC_ExitConfigMode();
    186          }
    187          
    188          /**
    189            * @brief  Gets the RTC divider value.
    190            * @param  None
    191            * @retval RTC Divider value.
    192            */
    193          uint32_t RTC_GetDivider(void)
    194          {
    195            uint32_t tmp = 0x00;
    196            tmp = ((uint32_t)RTC->DIVH & (uint32_t)0x000F) << 16;
    197            tmp |= RTC->DIVL;
    198            return tmp;
    199          }
    200          
    201          /**
    202            * @brief  Waits until last write operation on RTC registers has finished.
    203            * @note   This function must be called before any write to RTC registers.
    204            * @param  None
    205            * @retval None
    206            */
    207          void RTC_WaitForLastTask(void)
    208          {
    209          	uint32_t tout = 200000;
    210            /* Loop until RTOFF flag is set */
    211            while ((RTC->CRL & RTC_FLAG_RTOFF) == (uint16_t)RESET)
    212            {
    213          	  if(--tout == 0) break;
    214            }
    215          }
    216          
    217          /**
    218            * @brief  Waits until the RTC registers (RTC_CNT, RTC_ALR and RTC_PRL)
    219            *   are synchronized with RTC APB clock.
    220            * @note   This function must be called before any read operation after an APB reset
    221            *   or an APB clock stop.
    222            * @param  None
    223            * @retval None
    224            */
    225          void RTC_WaitForSynchro(void)
    226          {
    227            /* Clear RSF flag */
    228            RTC->CRL &= (uint16_t)~RTC_FLAG_RSF;
    229            /* Loop until RSF flag is set */
    230            while ((RTC->CRL & RTC_FLAG_RSF) == (uint16_t)RESET)
    231            {
    232            }
    233          }
    234          
    235          /**
    236            * @brief  Checks whether the specified RTC flag is set or not.
    237            * @param  RTC_FLAG: specifies the flag to check.
    238            *   This parameter can be one the following values:
    239            *     @arg RTC_FLAG_RTOFF: RTC Operation OFF flag
    240            *     @arg RTC_FLAG_RSF: Registers Synchronized flag
    241            *     @arg RTC_FLAG_OW: Overflow flag
    242            *     @arg RTC_FLAG_ALR: Alarm flag
    243            *     @arg RTC_FLAG_SEC: Second flag
    244            * @retval The new state of RTC_FLAG (SET or RESET).
    245            */
    246          FlagStatus RTC_GetFlagStatus(uint16_t RTC_FLAG)
    247          {
    248            FlagStatus bitstatus = RESET;
    249            
    250            /* Check the parameters */
    251            assert_param(IS_RTC_GET_FLAG(RTC_FLAG)); 
    252            
    253            if ((RTC->CRL & RTC_FLAG) != (uint16_t)RESET)
    254            {
    255              bitstatus = SET;
    256            }
    257            else
    258            {
    259              bitstatus = RESET;
    260            }
    261            return bitstatus;
    262          }
    263          
    264          /**
    265            * @brief  Clears the RTC's pending flags.
    266            * @param  RTC_FLAG: specifies the flag to clear.
    267            *   This parameter can be any combination of the following values:
    268            *     @arg RTC_FLAG_RSF: Registers Synchronized flag. This flag is cleared only after
    269            *                        an APB reset or an APB Clock stop.
    270            *     @arg RTC_FLAG_OW: Overflow flag
    271            *     @arg RTC_FLAG_ALR: Alarm flag
    272            *     @arg RTC_FLAG_SEC: Second flag
    273            * @retval None
    274            */
    275          void RTC_ClearFlag(uint16_t RTC_FLAG)
    276          {
    277            /* Check the parameters */
    278            assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG)); 
    279              
    280            /* Clear the corresponding RTC flag */
    281            RTC->CRL &= (uint16_t)~RTC_FLAG;
    282          }
    283          
    284          /**
    285            * @brief  Checks whether the specified RTC interrupt has occurred or not.
    286            * @param  RTC_IT: specifies the RTC interrupts sources to check.
    287            *   This parameter can be one of the following values:
    288            *     @arg RTC_IT_OW: Overflow interrupt
    289            *     @arg RTC_IT_ALR: Alarm interrupt
    290            *     @arg RTC_IT_SEC: Second interrupt
    291            * @retval The new state of the RTC_IT (SET or RESET).
    292            */
    293          ITStatus RTC_GetITStatus(uint16_t RTC_IT)
    294          {
    295            ITStatus bitstatus = RESET;
    296            /* Check the parameters */
    297            assert_param(IS_RTC_GET_IT(RTC_IT)); 
    298            
    299            bitstatus = (ITStatus)(RTC->CRL & RTC_IT);
    300            if (((RTC->CRH & RTC_IT) != (uint16_t)RESET) && (bitstatus != (uint16_t)RESET))
    301            {
    302              bitstatus = SET;
    303            }
    304            else
    305            {
    306              bitstatus = RESET;
    307            }
    308            return bitstatus;
    309          }
    310          
    311          /**
    312            * @brief  Clears the RTC's interrupt pending bits.
    313            * @param  RTC_IT: specifies the interrupt pending bit to clear.
    314            *   This parameter can be any combination of the following values:
    315            *     @arg RTC_IT_OW: Overflow interrupt
    316            *     @arg RTC_IT_ALR: Alarm interrupt
    317            *     @arg RTC_IT_SEC: Second interrupt
    318            * @retval None
    319            */
    320          void RTC_ClearITPendingBit(uint16_t RTC_IT)
    321          {
    322            /* Check the parameters */
    323            assert_param(IS_RTC_IT(RTC_IT));  
    324            
    325            /* Clear the corresponding RTC pending bit */
    326            RTC->CRL &= (uint16_t)~RTC_IT;
    327          }
    328          
    329          /**
    330            * @}
    331            */
    332          
    333          /**
    334            * @}
    335            */
    336          
    337          /**
    338            * @}
    339            */
    340          
    341          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   RTC_ClearFlag
       0   RTC_ClearITPendingBit
       0   RTC_EnterConfigMode
       0   RTC_ExitConfigMode
       0   RTC_GetCounter
       0   RTC_GetDivider
       0   RTC_GetFlagStatus
       0   RTC_GetITStatus
       0   RTC_ITConfig
       0   RTC_SetAlarm
       0   RTC_SetCounter
       0   RTC_SetPrescaler
       0   RTC_WaitForLastTask
       0   RTC_WaitForSynchro


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable13
       4  ??DataTable13_1
       4  ??DataTable13_2
       4  ??DataTable13_3
       4  ??DataTable13_4
      12  RTC_ClearFlag
      12  RTC_ClearITPendingBit
      12  RTC_EnterConfigMode
      14  RTC_ExitConfigMode
      12  RTC_GetCounter
      16  RTC_GetDivider
      16  RTC_GetFlagStatus
      28  RTC_GetITStatus
      18  RTC_ITConfig
      28  RTC_SetAlarm
      28  RTC_SetCounter
      32  RTC_SetPrescaler
      16  RTC_WaitForLastTask
      20  RTC_WaitForSynchro

 
 284 bytes in section .text
 
 284 bytes of CODE memory

Errors: none
Warnings: none
