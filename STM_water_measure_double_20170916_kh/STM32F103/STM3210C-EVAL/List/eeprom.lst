###############################################################################
#
# IAR ANSI C/C++ Compiler V8.22.1.15669/W32 for ARM       21/May/2019  11:38:05
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\Dawoon\Desktop\12.@@@@@@@\5.Source\Project\STM_water_measure_double_20170916_kh\STM32F103\eeprom.c
#    Command line =  
#        -f C:\Users\Dawoon\AppData\Local\Temp\EWBF42.tmp
#        (C:\Users\Dawoon\Desktop\12.@@@@@@@\5.Source\Project\STM_water_measure_double_20170916_kh\STM32F103\eeprom.c
#        -D USE_STDPERIPH_DRIVER -D STM32F10X_MD -D USE_STM3210C_EVAL -lcN
#        C:\Users\Dawoon\Desktop\12.@@@@@@@\5.Source\Project\STM_water_measure_double_20170916_kh\STM32F103\STM3210C-EVAL\List
#        --diag_suppress pa082 -o
#        C:\Users\Dawoon\Desktop\12.@@@@@@@\5.Source\Project\STM_water_measure_double_20170916_kh\STM32F103\STM3210C-EVAL\Obj
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Full.h" -I
#        C:\Users\Dawoon\Desktop\12.@@@@@@@\5.Source\Project\STM_water_measure_double_20170916_kh\STM32F103\
#        -I
#        C:\Users\Dawoon\Desktop\12.@@@@@@@\5.Source\Project\STM_water_measure_double_20170916_kh\STM32F103\..\..\..\Libraries\CMSIS\CM3\CoreSupport\
#        -I
#        C:\Users\Dawoon\Desktop\12.@@@@@@@\5.Source\Project\STM_water_measure_double_20170916_kh\STM32F103\..\..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\
#        -I
#        C:\Users\Dawoon\Desktop\12.@@@@@@@\5.Source\Project\STM_water_measure_double_20170916_kh\STM32F103\..\..\..\Libraries\STM32F10x_StdPeriph_Driver\inc\
#        -I
#        C:\Users\Dawoon\Desktop\12.@@@@@@@\5.Source\Project\STM_water_measure_double_20170916_kh\STM32F103\..\..\..\Utilities\STM32_EVAL\
#        -I
#        C:\Users\Dawoon\Desktop\12.@@@@@@@\5.Source\Project\STM_water_measure_double_20170916_kh\STM32F103\..\..\..\Utilities\STM32_EVAL\Common\
#        -I
#        C:\Users\Dawoon\Desktop\12.@@@@@@@\5.Source\Project\STM_water_measure_double_20170916_kh\STM32F103\..\..\..\Utilities\STM32_EVAL\STM3210C_EVAL\
#        -Ohs --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 8.0\arm\CMSIS\Core\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.0\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  
#        C:\Users\Dawoon\Desktop\12.@@@@@@@\5.Source\Project\STM_water_measure_double_20170916_kh\STM32F103\STM3210C-EVAL\List\eeprom.lst
#    Object file  =  
#        C:\Users\Dawoon\Desktop\12.@@@@@@@\5.Source\Project\STM_water_measure_double_20170916_kh\STM32F103\STM3210C-EVAL\Obj\eeprom.o
#
###############################################################################

C:\Users\Dawoon\Desktop\12.@@@@@@@\5.Source\Project\STM_water_measure_double_20170916_kh\STM32F103\eeprom.c
      1          /**
      2            ******************************************************************************
      3            * @file    EEPROM_Emulation/src/eeprom.c 
      4            * @author  MCD Application Team
      5            * @version V3.1.0
      6            * @date    07/27/2009
      7            * @brief   This file provides all the EEPROM emulation firmware functions.
      8            ******************************************************************************
      9            * @copy
     10            *
     11            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     12            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     13            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     14            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     15            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     16            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     17            *
     18            * <h2><center>&copy; COPYRIGHT 2009 STMicroelectronics</center></h2>
     19            */ 
     20          /** @addtogroup EEPROM_Emulation
     21            * @{
     22            */   
     23          
     24          /* Includes ------------------------------------------------------------------*/
     25          #include "eeprom.h"
     26          
     27          /* Private typedef -----------------------------------------------------------*/
     28          /* Private define ------------------------------------------------------------*/
     29          /* Private macro -------------------------------------------------------------*/
     30          /* Private variables ---------------------------------------------------------*/
     31          
     32          /* Global variable used to store variable value in read sequence */
     33          uint16_t DataVar = 0;
     34          
     35          /* Virtual address defined by the user: 0xFFFF value is prohibited */
     36          extern uint16_t VirtAddVarTab[NumbOfVar];
     37          
     38          /* Private function prototypes -----------------------------------------------*/
     39          /* Private functions ---------------------------------------------------------*/
     40          static FLASH_Status EE_Format(void);
     41          static uint16_t EE_FindValidPage(uint8_t Operation);
     42          static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data);
     43          static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data);
     44          
     45          /**
     46            * @brief  Restore the pages to a known good state in case of page's status
     47            *   corruption after a power loss.
     48            * @param  None.
     49            * @retval - Flash error code: on write Flash error
     50            *         - FLASH_COMPLETE: on success
     51            */
     52          uint16_t EE_Init(void)
     53          {
     54            uint16_t PageStatus0 = 6, PageStatus1 = 6;
     55            uint16_t VarIdx = 0;
     56            uint16_t EepromStatus = 0, ReadStatus = 0;
     57            int16_t x = -1;
     58            uint16_t  FlashStatus;
     59          
     60            /* Get Page0 status */
     61            PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
     62            /* Get Page1 status */
     63            PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
     64          
     65            /* Check for invalid header states and repair if necessary */
     66            switch (PageStatus0)
     67            {
     68              case ERASED:
     69                if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
     70                {
     71                  /* Erase Page0 */
     72                  FlashStatus = FLASH_ErasePage(PAGE0_BASE_ADDRESS);
     73                  /* If erase operation was failed, a Flash error code is returned */
     74                  if (FlashStatus != FLASH_COMPLETE)
     75                  {
     76                    return FlashStatus;
     77                  }
     78                }
     79                else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
     80                {
     81                  /* Erase Page0 */
     82                  FlashStatus = FLASH_ErasePage(PAGE0_BASE_ADDRESS);
     83                  /* If erase operation was failed, a Flash error code is returned */
     84                  if (FlashStatus != FLASH_COMPLETE)
     85                  {
     86                    return FlashStatus;
     87                  }
     88                  /* Mark Page1 as valid */
     89                  FlashStatus = FLASH_ProgramHalfWord(PAGE1_BASE_ADDRESS, VALID_PAGE);
     90                  /* If program operation was failed, a Flash error code is returned */
     91                  if (FlashStatus != FLASH_COMPLETE)
     92                  {
     93                    return FlashStatus;
     94                  }
     95                }
     96                else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
     97                {
     98                  /* Erase both Page0 and Page1 and set Page0 as valid page */
     99                  FlashStatus = EE_Format();
    100                  /* If erase/program operation was failed, a Flash error code is returned */
    101                  if (FlashStatus != FLASH_COMPLETE)
    102                  {
    103                    return FlashStatus;
    104                  }
    105                }
    106                break;
    107          
    108              case RECEIVE_DATA:
    109                if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
    110                {
    111                  /* Transfer data from Page1 to Page0 */
    112                  for (VarIdx = 0; VarIdx < NumbOfVar; VarIdx++)
    113                  {
    114                    if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
    115                    {
    116                      x = VarIdx;
    117                    }
    118                    if (VarIdx != x)
    119                    {
    120                      /* Read the last variables' updates */
    121                      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
    122                      /* In case variable corresponding to the virtual address was found */
    123                      if (ReadStatus != 0x1)
    124                      {
    125                        /* Transfer the variable to the Page0 */
    126                        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
    127                        /* If program operation was failed, a Flash error code is returned */
    128                        if (EepromStatus != FLASH_COMPLETE)
    129                        {
    130                          return EepromStatus;
    131                        }
    132                      }
    133                    }
    134                  }
    135                  /* Mark Page0 as valid */
    136                  FlashStatus = FLASH_ProgramHalfWord(PAGE0_BASE_ADDRESS, VALID_PAGE);
    137                  /* If program operation was failed, a Flash error code is returned */
    138                  if (FlashStatus != FLASH_COMPLETE)
    139                  {
    140                    return FlashStatus;
    141                  }
    142                  /* Erase Page1 */
    143                  FlashStatus = FLASH_ErasePage(PAGE1_BASE_ADDRESS);
    144                  /* If erase operation was failed, a Flash error code is returned */
    145                  if (FlashStatus != FLASH_COMPLETE)
    146                  {
    147                    return FlashStatus;
    148                  }
    149                }
    150                else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
    151                {
    152                  /* Erase Page1 */
    153                  FlashStatus = FLASH_ErasePage(PAGE1_BASE_ADDRESS);
    154                  /* If erase operation was failed, a Flash error code is returned */
    155                  if (FlashStatus != FLASH_COMPLETE)
    156                  {
    157                    return FlashStatus;
    158                  }
    159                  /* Mark Page0 as valid */
    160                  FlashStatus = FLASH_ProgramHalfWord(PAGE0_BASE_ADDRESS, VALID_PAGE);
    161                  /* If program operation was failed, a Flash error code is returned */
    162                  if (FlashStatus != FLASH_COMPLETE)
    163                  {
    164                    return FlashStatus;
    165                  }
    166                }
    167                else /* Invalid state -> format eeprom */
    168                {
    169                  /* Erase both Page0 and Page1 and set Page0 as valid page */
    170                  FlashStatus = EE_Format();
    171                  /* If erase/program operation was failed, a Flash error code is returned */
    172                  if (FlashStatus != FLASH_COMPLETE)
    173                  {
    174                    return FlashStatus;
    175                  }
    176                }
    177                break;
    178          
    179              case VALID_PAGE:
    180                if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
    181                {
    182                  /* Erase both Page0 and Page1 and set Page0 as valid page */
    183                  FlashStatus = EE_Format();
    184                  /* If erase/program operation was failed, a Flash error code is returned */
    185                  if (FlashStatus != FLASH_COMPLETE)
    186                  {
    187                    return FlashStatus;
    188                  }
    189                }
    190                else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
    191                {
    192                  /* Erase Page1 */
    193                  FlashStatus = FLASH_ErasePage(PAGE1_BASE_ADDRESS);
    194                  /* If erase operation was failed, a Flash error code is returned */
    195                  if (FlashStatus != FLASH_COMPLETE)
    196                  {
    197                    return FlashStatus;
    198                  }
    199                }
    200                else /* Page0 valid, Page1 receive */
    201                {
    202                  /* Transfer data from Page0 to Page1 */
    203                  for (VarIdx = 0; VarIdx < NumbOfVar; VarIdx++)
    204                  {
    205                    if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
    206                    {
    207                      x = VarIdx;
    208                    }
    209                    if (VarIdx != x)
    210                    {
    211                      /* Read the last variables' updates */
    212                      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
    213                      /* In case variable corresponding to the virtual address was found */
    214                      if (ReadStatus != 0x1)
    215                      {
    216                        /* Transfer the variable to the Page1 */
    217                        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
    218                        /* If program operation was failed, a Flash error code is returned */
    219                        if (EepromStatus != FLASH_COMPLETE)
    220                        {
    221                          return EepromStatus;
    222                        }
    223                      }
    224                    }
    225                  }
    226                  /* Mark Page1 as valid */
    227                  FlashStatus = FLASH_ProgramHalfWord(PAGE1_BASE_ADDRESS, VALID_PAGE);
    228                  /* If program operation was failed, a Flash error code is returned */
    229                  if (FlashStatus != FLASH_COMPLETE)
    230                  {
    231                    return FlashStatus;
    232                  }
    233                  /* Erase Page0 */
    234                  FlashStatus = FLASH_ErasePage(PAGE0_BASE_ADDRESS);
    235                  /* If erase operation was failed, a Flash error code is returned */
    236                  if (FlashStatus != FLASH_COMPLETE)
    237                  {
    238                    return FlashStatus;
    239                  }
    240                }
    241                break;
    242          
    243              default:  /* Any other state -> format eeprom */
    244                /* Erase both Page0 and Page1 and set Page0 as valid page */
    245                FlashStatus = EE_Format();
    246                /* If erase/program operation was failed, a Flash error code is returned */
    247                if (FlashStatus != FLASH_COMPLETE)
    248                {
    249                  return FlashStatus;
    250                }
    251                break;
    252            }
    253          
    254            return FLASH_COMPLETE;
    255          }
    256          
    257          /**
    258            * @brief  Returns the last stored variable data, if found, which correspond to
    259            *   the passed virtual address
    260            * @param  VirtAddress: Variable virtual address
    261            * @param  Data: Global variable contains the read variable value
    262            * @retval Success or error status:
    263            *           - 0: if variable was found
    264            *           - 1: if the variable was not found
    265            *           - NO_VALID_PAGE: if no valid page was found.
    266            */
    267          uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
    268          {
    269            uint16_t ValidPage = PAGE0;
    270            uint16_t AddressValue = 0x5555, ReadStatus = 1;
    271            uint32_t Address = 0x08010000, PageStartAddress = 0x08010000;
    272          
    273            /* Get active Page for read operation */
    274            ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
    275          
    276            /* Check if there is no valid page */
    277            if (ValidPage == NO_VALID_PAGE)
    278            {
    279              return  NO_VALID_PAGE;
    280            }
    281          
    282            /* Get the valid Page start Address */
    283            PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
    284          
    285            /* Get the valid Page end Address */
    286            Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
    287          
    288            /* Check each active page address starting from end */
    289            while (Address > (PageStartAddress + 2))
    290            {
    291              /* Get the current location content to be compared with virtual address */
    292              AddressValue = (*(__IO uint16_t*)Address);
    293          
    294              /* Compare the read address with the virtual address */
    295              if (AddressValue == VirtAddress)
    296              {
    297                /* Get content of Address-2 which is variable value */
    298                *Data = (*(__IO uint16_t*)(Address - 2));
    299          
    300                /* In case variable value is read, reset ReadStatus flag */
    301                ReadStatus = 0;
    302          
    303                break;
    304              }
    305              else
    306              {
    307                /* Next address location */
    308                Address = Address - 4;
    309              }
    310            }
    311          
    312            /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
    313            return ReadStatus;
    314          }
    315          
    316          /**
    317            * @brief  Writes/upadtes variable data in EEPROM.
    318            * @param  VirtAddress: Variable virtual address
    319            * @param  Data: 16 bit data to be written
    320            * @retval Success or error status:
    321            *           - FLASH_COMPLETE: on success
    322            *           - PAGE_FULL: if valid page is full
    323            *           - NO_VALID_PAGE: if no valid page was found
    324            *           - Flash error code: on write Flash error
    325            */
    326          uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
    327          {
    328            uint16_t Status = 0;
    329          
    330            /* Write the variable virtual address and value in the EEPROM */
    331            Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
    332          
    333            /* In case the EEPROM active page is full */
    334            if (Status == PAGE_FULL)
    335            {
    336              /* Perform Page transfer */
    337              Status = EE_PageTransfer(VirtAddress, Data);
    338            }
    339          
    340            /* Return last operation status */
    341            return Status;
    342          }
    343          
    344          /**
    345            * @brief  Erases PAGE0 and PAGE1 and writes VALID_PAGE header to PAGE0
    346            * @param  None
    347            * @retval Status of the last operation (Flash write or erase) done during
    348            *         EEPROM formating
    349            */
    350          static FLASH_Status EE_Format(void)
    351          {
    352            FLASH_Status FlashStatus = FLASH_COMPLETE;
    353          
    354            /* Erase Page0 */
    355            FlashStatus = FLASH_ErasePage(PAGE0_BASE_ADDRESS);
    356          
    357            /* If erase operation was failed, a Flash error code is returned */
    358            if (FlashStatus != FLASH_COMPLETE)
    359            {
    360              return FlashStatus;
    361            }
    362          
    363            /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
    364            FlashStatus = FLASH_ProgramHalfWord(PAGE0_BASE_ADDRESS, VALID_PAGE);
    365          
    366            /* If program operation was failed, a Flash error code is returned */
    367            if (FlashStatus != FLASH_COMPLETE)
    368            {
    369              return FlashStatus;
    370            }
    371          
    372            /* Erase Page1 */
    373            FlashStatus = FLASH_ErasePage(PAGE1_BASE_ADDRESS);
    374          
    375            /* Return Page1 erase operation status */
    376            return FlashStatus;
    377          }
    378          
    379          /**
    380            * @brief  Find valid Page for write or read operation
    381            * @param  Operation: operation to achieve on the valid page.
    382            *   This parameter can be one of the following values:
    383            *     @arg READ_FROM_VALID_PAGE: read operation from valid page
    384            *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
    385            * @retval Valid page number (PAGE0 or PAGE1) or NO_VALID_PAGE in case
    386            *   of no valid page was found
    387            */
    388          static uint16_t EE_FindValidPage(uint8_t Operation)
    389          {
    390            uint16_t PageStatus0 = 6, PageStatus1 = 6;
    391          
    392            /* Get Page0 actual status */
    393            PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
    394          
    395            /* Get Page1 actual status */
    396            PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
    397          
    398            /* Write or read operation */
    399            switch (Operation)
    400            {
    401              case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
    402                if (PageStatus1 == VALID_PAGE)
    403                {
    404                  /* Page0 receiving data */
    405                  if (PageStatus0 == RECEIVE_DATA)
    406                  {
    407                    return PAGE0;         /* Page0 valid */
    408                  }
    409                  else
    410                  {
    411                    return PAGE1;         /* Page1 valid */
    412                  }
    413                }
    414                else if (PageStatus0 == VALID_PAGE)
    415                {
    416                  /* Page1 receiving data */
    417                  if (PageStatus1 == RECEIVE_DATA)
    418                  {
    419                    return PAGE1;         /* Page1 valid */
    420                  }
    421                  else
    422                  {
    423                    return PAGE0;         /* Page0 valid */
    424                  }
    425                }
    426                else
    427                {
    428                  return NO_VALID_PAGE;   /* No valid Page */
    429                }
    430          
    431              case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
    432                if (PageStatus0 == VALID_PAGE)
    433                {
    434                  return PAGE0;           /* Page0 valid */
    435                }
    436                else if (PageStatus1 == VALID_PAGE)
    437                {
    438                  return PAGE1;           /* Page1 valid */
    439                }
    440                else
    441                {
    442                  return NO_VALID_PAGE ;  /* No valid Page */
    443                }
    444          
    445              default:
    446                return PAGE0;             /* Page0 valid */
    447            }
    448          }
    449          
    450          /**
    451            * @brief  Verify if active page is full and Writes variable in EEPROM.
    452            * @param  VirtAddress: 16 bit virtual address of the variable
    453            * @param  Data: 16 bit data to be written as variable value
    454            * @retval Success or error status:
    455            *           - FLASH_COMPLETE: on success
    456            *           - PAGE_FULL: if valid page is full
    457            *           - NO_VALID_PAGE: if no valid page was found
    458            *           - Flash error code: on write Flash error
    459            */
    460          static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
    461          {
    462            FLASH_Status FlashStatus = FLASH_COMPLETE;
    463            uint16_t ValidPage = PAGE0;
    464            uint32_t Address = 0x08010000, PageEndAddress = 0x080107FF;
    465          
    466            /* Get valid Page for write operation */
    467            ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
    468          
    469            /* Check if there is no valid page */
    470            if (ValidPage == NO_VALID_PAGE)
    471            {
    472              return  NO_VALID_PAGE;
    473            }
    474          
    475            /* Get the valid Page start Address */
    476            Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
    477          
    478            /* Get the valid Page end Address */
    479            PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
    480          
    481            /* Check each active page address starting from begining */
    482            while (Address < PageEndAddress)
    483            {
    484              /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    485              if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
    486              {
    487                /* Set variable data */
    488                FlashStatus = FLASH_ProgramHalfWord(Address, Data);
    489                /* If program operation was failed, a Flash error code is returned */
    490                if (FlashStatus != FLASH_COMPLETE)
    491                {
    492                  return FlashStatus;
    493                }
    494                /* Set variable virtual address */
    495                FlashStatus = FLASH_ProgramHalfWord(Address + 2, VirtAddress);
    496                /* Return program operation status */
    497                return FlashStatus;
    498              }
    499              else
    500              {
    501                /* Next address location */
    502                Address = Address + 4;
    503              }
    504            }
    505          
    506            /* Return PAGE_FULL in case the valid page is full */
    507            return PAGE_FULL;
    508          }
    509          
    510          /**
    511            * @brief  Transfers last updated variables data from the full Page to
    512            *   an empty one.
    513            * @param  VirtAddress: 16 bit virtual address of the variable
    514            * @param  Data: 16 bit data to be written as variable value
    515            * @retval Success or error status:
    516            *           - FLASH_COMPLETE: on success
    517            *           - PAGE_FULL: if valid page is full
    518            *           - NO_VALID_PAGE: if no valid page was found
    519            *           - Flash error code: on write Flash error
    520            */
    521          static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
    522          {
    523            FLASH_Status FlashStatus = FLASH_COMPLETE;
    524            uint32_t NewPageAddress = 0x080103FF, OldPageAddress = 0x08010000;
    525            uint16_t ValidPage = PAGE0, VarIdx = 0;
    526            uint16_t EepromStatus = 0, ReadStatus = 0;
    527          
    528            /* Get active Page for read operation */
    529            ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
    530          
    531            if (ValidPage == PAGE1)       /* Page1 valid */
    532            {
    533              /* New page address where variable will be moved to */
    534              NewPageAddress = PAGE0_BASE_ADDRESS;
    535          
    536              /* Old page address where variable will be taken from */
    537              OldPageAddress = PAGE1_BASE_ADDRESS;
    538            }
    539            else if (ValidPage == PAGE0)  /* Page0 valid */
    540            {
    541              /* New page address where variable will be moved to */
    542              NewPageAddress = PAGE1_BASE_ADDRESS;
    543          
    544              /* Old page address where variable will be taken from */
    545              OldPageAddress = PAGE0_BASE_ADDRESS;
    546            }
    547            else
    548            {
    549              return NO_VALID_PAGE;       /* No valid Page */
    550            }
    551          
    552            /* Set the new Page status to RECEIVE_DATA status */
    553            FlashStatus = FLASH_ProgramHalfWord(NewPageAddress, RECEIVE_DATA);
    554            /* If program operation was failed, a Flash error code is returned */
    555            if (FlashStatus != FLASH_COMPLETE)
    556            {
    557              return FlashStatus;
    558            }
    559          
    560            /* Write the variable passed as parameter in the new active page */
    561            EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
    562            /* If program operation was failed, a Flash error code is returned */
    563            if (EepromStatus != FLASH_COMPLETE)
    564            {
    565              return EepromStatus;
    566            }
    567          
    568            /* Transfer process: transfer variables from old to the new active page */
    569            for (VarIdx = 0; VarIdx < NumbOfVar; VarIdx++)
    570            {
    571              if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
    572              {
    573                /* Read the other last variable updates */
    574                ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
    575                /* In case variable corresponding to the virtual address was found */
    576                if (ReadStatus != 0x1)
    577                {
    578                  /* Transfer the variable to the new active page */
    579                  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
    580                  /* If program operation was failed, a Flash error code is returned */
    581                  if (EepromStatus != FLASH_COMPLETE)
    582                  {
    583                    return EepromStatus;
    584                  }
    585                }
    586              }
    587            }
    588          
    589            /* Erase the old Page: Set old Page status to ERASED status */
    590            FlashStatus = FLASH_ErasePage(OldPageAddress);
    591            /* If erase operation was failed, a Flash error code is returned */
    592            if (FlashStatus != FLASH_COMPLETE)
    593            {
    594              return FlashStatus;
    595            }
    596          
    597            /* Set new Page status to VALID_PAGE status */
    598            FlashStatus = FLASH_ProgramHalfWord(NewPageAddress, VALID_PAGE);
    599            /* If program operation was failed, a Flash error code is returned */
    600            if (FlashStatus != FLASH_COMPLETE)
    601            {
    602              return FlashStatus;
    603            }
    604          
    605            /* Return last operation flash status */
    606            return FlashStatus;
    607          }
    608          
    609          /**
    610            * @}
    611            */ 
    612          
    613          /******************* (C) COPYRIGHT 2009 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   EE_FindValidPage
       8   EE_Format
         0   -> FLASH_ErasePage
         8   -> FLASH_ErasePage
         8   -> FLASH_ProgramHalfWord
      24   EE_Init
        24   -> EE_Format
        24   -> EE_ReadVariable
        24   -> EE_VerifyPageFullWriteVariable
        24   -> FLASH_ErasePage
        24   -> FLASH_ProgramHalfWord
      32   EE_PageTransfer
        32   -> EE_FindValidPage
        32   -> EE_ReadVariable
        32   -> EE_VerifyPageFullWriteVariable
        32   -> FLASH_ErasePage
         0   -> FLASH_ProgramHalfWord
        32   -> FLASH_ProgramHalfWord
       8   EE_ReadVariable
      16   EE_VerifyPageFullWriteVariable
        16   -> EE_FindValidPage
         0   -> FLASH_ProgramHalfWord
        16   -> FLASH_ProgramHalfWord
      16   EE_WriteVariable
         0   -> EE_PageTransfer
        16   -> EE_VerifyPageFullWriteVariable


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       2  DataVar
      56  EE_FindValidPage
      38  EE_Format
     320  EE_Init
     146  EE_PageTransfer
      76  EE_ReadVariable
      74  EE_VerifyPageFullWriteVariable
      32  EE_WriteVariable

 
   2 bytes in section .bss
 762 bytes in section .text
 
 762 bytes of CODE memory
   2 bytes of DATA memory

Errors: none
Warnings: none
