###############################################################################
#
# IAR ANSI C/C++ Compiler V8.22.1.15669/W32 for ARM       23/May/2019  16:04:58
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\Dawoon\Desktop\12.@@@@@@@\5.Source\Project\STM_water_measure_double_20170916_kh\STM32F103\water_intake_mram_menage.c
#    Command line =  
#        -f C:\Users\Dawoon\AppData\Local\Temp\EW999C.tmp
#        (C:\Users\Dawoon\Desktop\12.@@@@@@@\5.Source\Project\STM_water_measure_double_20170916_kh\STM32F103\water_intake_mram_menage.c
#        -D USE_STDPERIPH_DRIVER -D STM32F10X_MD -D USE_STM3210C_EVAL -lcN
#        C:\Users\Dawoon\Desktop\12.@@@@@@@\5.Source\Project\STM_water_measure_double_20170916_kh\STM32F103\STM3210C-EVAL\List
#        --diag_suppress pa082 -o
#        C:\Users\Dawoon\Desktop\12.@@@@@@@\5.Source\Project\STM_water_measure_double_20170916_kh\STM32F103\STM3210C-EVAL\Obj
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Full.h" -I
#        C:\Users\Dawoon\Desktop\12.@@@@@@@\5.Source\Project\STM_water_measure_double_20170916_kh\STM32F103\
#        -I
#        C:\Users\Dawoon\Desktop\12.@@@@@@@\5.Source\Project\STM_water_measure_double_20170916_kh\STM32F103\..\..\..\Libraries\CMSIS\CM3\CoreSupport\
#        -I
#        C:\Users\Dawoon\Desktop\12.@@@@@@@\5.Source\Project\STM_water_measure_double_20170916_kh\STM32F103\..\..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\
#        -I
#        C:\Users\Dawoon\Desktop\12.@@@@@@@\5.Source\Project\STM_water_measure_double_20170916_kh\STM32F103\..\..\..\Libraries\STM32F10x_StdPeriph_Driver\inc\
#        -I
#        C:\Users\Dawoon\Desktop\12.@@@@@@@\5.Source\Project\STM_water_measure_double_20170916_kh\STM32F103\..\..\..\Utilities\STM32_EVAL\
#        -I
#        C:\Users\Dawoon\Desktop\12.@@@@@@@\5.Source\Project\STM_water_measure_double_20170916_kh\STM32F103\..\..\..\Utilities\STM32_EVAL\Common\
#        -I
#        C:\Users\Dawoon\Desktop\12.@@@@@@@\5.Source\Project\STM_water_measure_double_20170916_kh\STM32F103\..\..\..\Utilities\STM32_EVAL\STM3210C_EVAL\
#        -Ohs --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 8.0\arm\CMSIS\Core\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.0\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  
#        C:\Users\Dawoon\Desktop\12.@@@@@@@\5.Source\Project\STM_water_measure_double_20170916_kh\STM32F103\STM3210C-EVAL\List\water_intake_mram_menage.lst
#    Object file  =  
#        C:\Users\Dawoon\Desktop\12.@@@@@@@\5.Source\Project\STM_water_measure_double_20170916_kh\STM32F103\STM3210C-EVAL\Obj\water_intake_mram_menage.o
#
###############################################################################

C:\Users\Dawoon\Desktop\12.@@@@@@@\5.Source\Project\STM_water_measure_double_20170916_kh\STM32F103\water_intake_mram_menage.c
      1          #include "hw_control.h"
      2          #include "spi_flash.h"
      3          
      4          #define MRAM_MAX_ADDRESS	(0x8000 - 1)
      5          
      6          #define MRAM_INTAKE_START_ADDRESS	0x100
      7          #define MRAM_INTAKE_HEAD_ADDRESS		0x06
      8          
      9          #define MRAM_EEPROM_ADDRESS	0x10
     10          
     11          volatile uint16_t Mram_intake_address[MRAM_INTAKE_MAX_ADDRESS];
     12          volatile uint8_t itemp = 0xfa, xtemp = 0;
     13          volatile uint8_t status = 0;
     14          volatile uint32_t wadr = 1;
     15          volatile uint32_t radr = 2;
     16          volatile uint8_t lp = 1;
     17          volatile uint8_t dat = 1;
     18          volatile uint8_t wd[10];
     19          volatile uint8_t rd[10];
     20          
     21          void mram_test(void)
     22          {
     23              while(1)
     24              {		
     25                  if(lp==1)
     26                  {
     27                      lp = 0;			
     28                      status = SPI_FLASH_PageWrite((uint8_t*)&wd, wadr, 10);	Delay(1);				
     29                      Delay(10);		          
     30                  }
     31                  SPI_FLASH_BufferRead((uint8_t*)&rd, radr, 10);
     32                  Delay(10);
     33              }
     34          }
     35          
     36          
     37          uint16_t Intake_Head(void)
     38          {
     39              //mram@@ @ @@@@ 
     40              uint16_t ret;
     41              //mram@@ @@@@ ~!!
     42              SPI_FLASH_BufferRead((uint8_t*)&ret, MRAM_INTAKE_HEAD_ADDRESS, 2);
     43                if(ret >= MRAM_INTAKE_MAX_ADDRESS) ret = 0;
     44              return ret;
     45          }
     46          
     47          void Intake_head_increment()
     48          {
     49              uint16_t head = Intake_Head() + 1;
     50              
     51              if(head > MRAM_INTAKE_MAX_ADDRESS) head = 0;	
     52              SPI_FLASH_PageWrite((uint8_t*)&head, MRAM_INTAKE_HEAD_ADDRESS, 2);
     53          }
     54          
     55          void Intake_page_all_init()
     56          {
     57              uint16_t i=0;
     58              WATER_ITAKE_TABLE_STRUCT w_intake_clear;
     59              
     60              memset((void *)&w_intake_clear, 0, sizeof(w_intake_clear));
     61              
     62              for(i=0;i<MRAM_INTAKE_MAX_ADDRESS;i++)
     63              {
     64                  w_intake_clear.index = i;		
     65                  SPI_FLASH_PageWrite((uint8_t *)&w_intake_clear,Mram_intake_address[i], sizeof(w_intake_clear));
     66              }
     67          }
     68          
     69          void Intake_page_all_enable()
     70          {
     71              uint16_t i=0;
     72              WATER_ITAKE_TABLE_STRUCT w_intake_enable;
     73              
     74              for(i=0;i<MRAM_INTAKE_MAX_ADDRESS;i++)
     75              {
     76                  memset((void *)&w_intake_enable, 0, sizeof(w_intake_enable));
     77                  
     78                  SPI_FLASH_BufferRead((uint8_t *)&w_intake_enable,Mram_intake_address[i], sizeof(w_intake_enable));
     79                  
     80                  if(w_intake_enable.index != 0 && w_intake_enable.date != 0 && w_intake_enable.feeder_num != 0)
     81                  {
     82                      w_intake_enable.status |= 0x01;		
     83                      SPI_FLASH_PageWrite((uint8_t *)&w_intake_enable,Mram_intake_address[i], sizeof(w_intake_enable));
     84                  }
     85              }
     86          }
     87          
     88          #ifdef MRAM_EEPROM_ENABLE
     89          
     90          void lll_eeprom_init(void)
     91          {
     92              uint16_t i=0;
     93              Mram_intake_address[0] = MRAM_INTAKE_START_ADDRESS;		//0x0004813C
     94              for(i=1;i<MRAM_INTAKE_MAX_ADDRESS;i++)
     95              {
     96                  Mram_intake_address[i] = Mram_intake_address[i-1] + sizeof(WATER_ITAKE_TABLE_STRUCT);
     97              }	
     98              //mram_init
     99          }
    100          
    101          void eeprom_default_value(void)		
    102          {
    103              CON_ADDRESS = CON_ADDRESS_DEFAULT;		
    104              CON_WATER_WAIT_TIME = CON_WATER_WAIT_TIME_DEFAULT;
    105              CON_WATER_WAIT_DIFF = CON_WATER_WAIT_DIFF_DEFAULT;
    106              CON_COWIN_IR_CNT = CON_COWIN_IR_CNT_DEFAULT;
    107              CON_COWIN_RFID_CNT = CON_COWIN_RFID_CNT_DEFAULT;
    108              COM_RE_ENTER_CNT = COM_RE_ENTER_CNT_DEFAULT;	
    109              CON_WATER_WAIT = CON_WATER_WAIT_DEFAULT;
    110              
    111              Intake_page_all_init();	//mram clear
    112          }
    113          
    114          void load_eeprom(void)
    115          {
    116              SPI_FLASH_BufferRead((uint8_t*)&Config, MRAM_EEPROM_ADDRESS, sizeof(Config));
    117              
    118              if(Config.setup != EEPROM_CHECK_VALUE)
    119              {
    120                Config.setup = EEPROM_CHECK_VALUE;
    121                eeprom_default_value(); 
    122                save_all_eeprom(); 	
    123                
    124                TM_HD44780_Puts(0,0,"EEPROM DEFAULT  ");
    125                TM_HD44780_Puts(0,1," Water Weight   ");
    126                Delay(1000);		
    127          	} 
    128          	else
    129          	{
    130                TM_HD44780_Puts(0,0,"EEPROM OK       ");
    131                TM_HD44780_Puts(0,1," Water Weight   ");
    132                Delay(1000);
    133          	}
    134          }
    135          
    136          void save_all_eeprom(void)
    137          {
    138              Config.setup = EEPROM_CHECK_VALUE;
    139              SPI_FLASH_PageWrite((uint8_t*)&Config, MRAM_EEPROM_ADDRESS, sizeof(Config));
    140          }
    141          
    142          #endif
    143          
    144          
    145          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   Intake_Head
         8   -> SPI_FLASH_BufferRead
       8   Intake_head_increment
         8   -> SPI_FLASH_BufferRead
         8   -> SPI_FLASH_PageWrite
      48   Intake_page_all_enable
        48   -> SPI_FLASH_BufferRead
        48   -> SPI_FLASH_PageWrite
      40   Intake_page_all_init
        40   -> SPI_FLASH_PageWrite
      40   eeprom_default_value
        40   -> SPI_FLASH_PageWrite
       0   lll_eeprom_init
      16   load_eeprom
         0   -> Delay
        16   -> SPI_FLASH_BufferRead
        16   -> SPI_FLASH_PageWrite
        16   -> TM_HD44780_Puts
        16   -> eeprom_default_value
       8   mram_test
         8   -> Delay
         8   -> SPI_FLASH_BufferRead
         8   -> SPI_FLASH_PageWrite
       0   save_all_eeprom
         0   -> SPI_FLASH_PageWrite


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable9
       4  ??DataTable9_1
       4  ??DataTable9_2
      20  ?_0
      20  ?_1
      20  ?_2
      36  Intake_Head
      68  Intake_head_increment
      86  Intake_page_all_enable
      52  Intake_page_all_init
     400  Mram_intake_address
       1  dat
      80  eeprom_default_value
       1  itemp
      60  lll_eeprom_init
      80  load_eeprom
      60  mram_test
      16  save_all_eeprom
      36  status
          lp
          wadr
          radr
          wd
          rd
       1  xtemp

 
 401 bytes in section .bss
  38 bytes in section .data
 610 bytes in section .text
 
 610 bytes of CODE memory
 439 bytes of DATA memory

Errors: none
Warnings: none
