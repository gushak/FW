###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       24/Apr/2019  16:42:19
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\12.물섭취량조사기\5.Source\Project\backup\STM32F103\spi_flash.c
#    Command line =  
#        D:\12.물섭취량조사기\5.Source\Project\backup\STM32F103\spi_flash.c -D
#        USE_STDPERIPH_DRIVER -D STM32F10X_MD -D USE_STM3210C_EVAL -lcN
#        D:\12.물섭취량조사기\5.Source\Project\backup\STM32F103\STM3210C-EVAL\List
#        --diag_suppress pa082 -o
#        D:\12.물섭취량조사기\5.Source\Project\backup\STM32F103\STM3210C-EVAL\Obj
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\INC\c\DLib_Config_Full.h" -I
#        D:\12.물섭취량조사기\5.Source\Project\backup\STM32F103\ -I
#        D:\12.물섭취량조사기\5.Source\Project\backup\STM32F103\..\..\..\Libraries\CMSIS\CM3\CoreSupport\
#        -I
#        D:\12.물섭취량조사기\5.Source\Project\backup\STM32F103\..\..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\
#        -I
#        D:\12.물섭취량조사기\5.Source\Project\backup\STM32F103\..\..\..\Libraries\STM32F10x_StdPeriph_Driver\inc\
#        -I
#        D:\12.물섭취량조사기\5.Source\Project\backup\STM32F103\..\..\..\Utilities\STM32_EVAL\
#        -I
#        D:\12.물섭취량조사기\5.Source\Project\backup\STM32F103\..\..\..\Utilities\STM32_EVAL\Common\
#        -I
#        D:\12.물섭취량조사기\5.Source\Project\backup\STM32F103\..\..\..\Utilities\STM32_EVAL\STM3210C_EVAL\
#        -Ohs --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.5\arm\CMSIS\Include\"
#    Locale       =  Korean_Korea.949
#    List file    =  
#        D:\12.물섭취량조사기\5.Source\Project\backup\STM32F103\STM3210C-EVAL\List\spi_flash.lst
#    Object file  =  
#        D:\12.물섭취량조사기\5.Source\Project\backup\STM32F103\STM3210C-EVAL\Obj\spi_flash.o
#
###############################################################################

D:\12.물섭취량조사기\5.Source\Project\backup\STM32F103\spi_flash.c
      1          #include "spi_flash.h"
      2          
      3          
      4          /* Private typedef -----------------------------------------------------------*/
      5          #define SPI_FLASH_PageSize    0x100
      6          
      7          /* Private define ------------------------------------------------------------*/
      8          #define WRITE      0x02  /* Write to Memory instruction */
      9          #define WRSR       0x01  /* Write Status Register instruction */
     10          #define WREN       0x06  /* Write enable instruction */
     11          #define WRDI       0x06  /* Write enable instruction */
     12          
     13          #define READ       0x03  /* Read from Memory instruction */
     14          #define RDSR       0x05  /* Read Status Register instruction  */
     15          #define RDID       0x9F  /* Read identification */
     16          #define SE         0xD8  /* Sector Erase instruction */
     17          #define BE         0xC7  /* Bulk Erase instruction */
     18          
     19          
     20          
     21          #define Dummy_Byte 0x0
     22          
     23          /* Private macro -------------------------------------------------------------*/
     24          /* Private variables ---------------------------------------------------------*/
     25          /* Private function prototypes -----------------------------------------------*/
     26          /* Private functions ---------------------------------------------------------*/
     27          
     28          /**
     29            * @brief  Initializes the peripherals used by the SPI FLASH driver.
     30            * @param  None
     31            * @retval : None
     32            */
     33          void SPI_FLASH_Init(void)
     34          {
     35            SPI_InitTypeDef  SPI_InitStructure;
     36            GPIO_InitTypeDef GPIO_InitStructure;
     37          
     38            /* Enable SPI2 and GPIO clocks */
     39            RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA |  RCC_APB2Periph_GPIOB | RCC_APB2Periph_GPIOC , ENABLE);
     40            RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);
     41            
     42          
     43            /* Configure SPI2 pins: SCK, MISO and MOSI */
     44            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
     45            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
     46            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     47            GPIO_Init(GPIOB, &GPIO_InitStructure);
     48          
     49            /* Configure I/O for Flash Chip select */
     50            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_CS;
     51            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
     52            GPIO_Init(GPIO_CS, &GPIO_InitStructure);
     53            
     54            //hold
     55            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
     56            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
     57            GPIO_Init(GPIOC, &GPIO_InitStructure);
     58            GPIO_SetBits(GPIOC, GPIO_Pin_6);	
     59            /* Deselect the FLASH: Chip Select high */
     60            SPI_FLASH_CS_HIGH();
     61          
     62            /* SPI2 configuration */
     63            SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
     64            SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
     65            SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
     66            SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
     67            SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
     68            SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
     69            SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_4;
     70            SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
     71            SPI_InitStructure.SPI_CRCPolynomial = 7;
     72            SPI_Init(SPI2, &SPI_InitStructure);
     73            
     74            /* Enable SPI2  */
     75            SPI_Cmd(SPI2, ENABLE);
     76              
     77            SPI_FLASH_WriteEnable();
     78          }
     79          
     80          uint8_t SPI_FLASH_PageWrite(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
     81          {
     82          	
     83            /* Enable the write access to the FLASH */
     84            SPI_FLASH_WriteEnable();
     85          
     86            /* Select the FLASH: Chip Select low */
     87            SPI_FLASH_CS_LOW();
     88            /* Send "Write to Memory " instruction */
     89            SPI_FLASH_SendByte(WRITE);
     90            /* Send WriteAddr high nibble address byte to write to */
     91            //SPI_FLASH_SendByte((WriteAddr & 0xFF0000) >> 16);
     92            /* Send WriteAddr medium nibble address byte to write to */
     93            SPI_FLASH_SendByte((WriteAddr & 0xFF00) >> 8);
     94            /* Send WriteAddr low nibble address byte to write to */
     95            SPI_FLASH_SendByte(WriteAddr & 0xFF);
     96          
     97            /* while there is data to be written on the FLASH */
     98            while (NumByteToWrite--)
     99            {
    100              /* Send the current byte */
    101              SPI_FLASH_SendByte(*pBuffer);
    102              /* Point on the next byte to be written */
    103              pBuffer++;
    104            }
    105          
    106            /* Deselect the FLASH: Chip Select high */
    107            SPI_FLASH_CS_HIGH();
    108          
    109            /* Wait the end of Flash writing */
    110            return SPI_FLASH_WaitForWriteEnd();
    111          }
    112          
    113          void SPI_FLASH_BufferRead(uint8_t* pBuffer, uint32_t ReadAddr, uint16_t NumByteToRead)
    114          {
    115            /* Select the FLASH: Chip Select low */
    116            SPI_FLASH_CS_LOW();
    117          
    118            /* Send "Read from Memory " instruction */
    119            SPI_FLASH_SendByte(READ);
    120          
    121            /* Send ReadAddr high nibble address byte to read from */
    122            //SPI_FLASH_SendByte((ReadAddr & 0xFF0000) >> 16);
    123            /* Send ReadAddr medium nibble address byte to read from */
    124            SPI_FLASH_SendByte((ReadAddr& 0xFF00) >> 8);
    125            /* Send ReadAddr low nibble address byte to read from */
    126            SPI_FLASH_SendByte(ReadAddr & 0xFF);
    127          
    128            while (NumByteToRead--) /* while there is data to be read */
    129            {
    130              /* Read a byte from the FLASH */
    131              *pBuffer = SPI_FLASH_SendByte(Dummy_Byte);
    132              /* Point to the next location where the byte read will be saved */
    133              pBuffer++;
    134            }
    135          
    136            /* Deselect the FLASH: Chip Select high */
    137            SPI_FLASH_CS_HIGH();
    138          }
    139          
    140          void SPI_FLASH_StartReadSequence(uint32_t ReadAddr)
    141          {
    142            /* Select the FLASH: Chip Select low */
    143            SPI_FLASH_CS_LOW();
    144          
    145            /* Send "Read from Memory " instruction */
    146            SPI_FLASH_SendByte(READ);
    147          
    148            /* Send the 24-bit address of the address to read from -----------------------*/
    149            /* Send ReadAddr high nibble address byte */
    150            //SPI_FLASH_SendByte((ReadAddr & 0xFF0000) >> 16);
    151            /* Send ReadAddr medium nibble address byte */
    152            SPI_FLASH_SendByte((ReadAddr& 0xFF00) >> 8);
    153            /* Send ReadAddr low nibble address byte */
    154            SPI_FLASH_SendByte(ReadAddr & 0xFF);
    155          }
    156          
    157          uint8_t SPI_FLASH_ReadByte(void)
    158          {
    159            return (SPI_FLASH_SendByte(Dummy_Byte));
    160          }
    161          
    162          uint8_t SPI_FLASH_SendByte(uint8_t byte)
    163          {
    164            /* Loop while DR register in not emplty */
    165            while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) == RESET);
    166          
    167            /* Send byte through the SPI2 peripheral */
    168            SPI_I2S_SendData(SPI2, byte);
    169          
    170            /* Wait to receive a byte */
    171            while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET);
    172          
    173            /* Return the byte read from the SPI bus */
    174            return SPI_I2S_ReceiveData(SPI2);
    175          }
    176          
    177          uint16_t SPI_FLASH_SendHalfWord(uint16_t HalfWord)
    178          {
    179            /* Loop while DR register in not emplty */
    180            while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) == RESET);
    181          
    182            /* Send Half Word through the SPI2 peripheral */
    183            SPI_I2S_SendData(SPI2, HalfWord);
    184          
    185            /* Wait to receive a Half Word */
    186            while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET);
    187          
    188            /* Return the Half Word read from the SPI bus */
    189            return SPI_I2S_ReceiveData(SPI2);
    190          }
    191          
    192          void SPI_FLASH_WriteEnable(void)
    193          {
    194            /* Select the FLASH: Chip Select low */
    195            SPI_FLASH_CS_LOW();
    196          
    197            /* Send "Write Enable" instruction */
    198            SPI_FLASH_SendByte(WREN);
    199          
    200            /* Deselect the FLASH: Chip Select high */
    201            SPI_FLASH_CS_HIGH();
    202          }
    203          
    204          void SPI_FLASH_WriteDisable(void)
    205          {
    206            /* Select the FLASH: Chip Select low */
    207            SPI_FLASH_CS_LOW();
    208          
    209            /* Send "Write Enable" instruction */
    210            SPI_FLASH_SendByte(WRDI);
    211          
    212            /* Deselect the FLASH: Chip Select high */
    213            SPI_FLASH_CS_HIGH();
    214          }
    215          
    216          uint8_t FLASH_Statusx = 0;
    217          uint8_t SPI_FLASH_WaitForWriteEnd(void)
    218          {
    219            
    220          
    221            /* Select the FLASH: Chip Select low */
    222            SPI_FLASH_CS_LOW();
    223          
    224            /* Send "Read Status Register" instruction */
    225            SPI_FLASH_SendByte(RDSR);
    226          
    227            /* Loop as long as the memory is busy with a write cycle */
    228          
    229            /* Send a dummy byte to generate the clock needed by the FLASH
    230            and put the value of the status register in FLASH_Status variable */
    231            FLASH_Statusx = SPI_FLASH_SendByte(Dummy_Byte);
    232          
    233           
    234            /* Deselect the FLASH: Chip Select high */
    235            SPI_FLASH_CS_HIGH();
    236            
    237            return FLASH_Statusx;
    238          }
    239          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   SPI_FLASH_BufferRead
        32   -> GPIO_ResetBits
         0   -> GPIO_SetBits
        32   -> SPI_I2S_GetFlagStatus
        32   -> SPI_I2S_ReceiveData
        32   -> SPI_I2S_SendData
      40   SPI_FLASH_Init
        40   -> GPIO_Init
        40   -> GPIO_ResetBits
        40   -> GPIO_SetBits
        40   -> RCC_APB1PeriphClockCmd
        40   -> RCC_APB2PeriphClockCmd
        40   -> SPI_Cmd
        40   -> SPI_I2S_GetFlagStatus
        40   -> SPI_I2S_ReceiveData
        40   -> SPI_I2S_SendData
        40   -> SPI_Init
      32   SPI_FLASH_PageWrite
        32   -> GPIO_ResetBits
        32   -> GPIO_SetBits
        32   -> SPI_I2S_GetFlagStatus
        32   -> SPI_I2S_ReceiveData
        32   -> SPI_I2S_SendData
       8   SPI_FLASH_ReadByte
         8   -> SPI_I2S_GetFlagStatus
         8   -> SPI_I2S_ReceiveData
         8   -> SPI_I2S_SendData
      16   SPI_FLASH_SendByte
        16   -> SPI_I2S_GetFlagStatus
        16   -> SPI_I2S_ReceiveData
        16   -> SPI_I2S_SendData
      16   SPI_FLASH_SendHalfWord
        16   -> SPI_I2S_GetFlagStatus
         0   -> SPI_I2S_ReceiveData
        16   -> SPI_I2S_SendData
      16   SPI_FLASH_StartReadSequence
        16   -> GPIO_ResetBits
        16   -> SPI_I2S_GetFlagStatus
         0   -> SPI_I2S_ReceiveData
        16   -> SPI_I2S_ReceiveData
        16   -> SPI_I2S_SendData
      16   SPI_FLASH_WaitForWriteEnd
        16   -> GPIO_ResetBits
        16   -> GPIO_SetBits
        16   -> SPI_I2S_GetFlagStatus
        16   -> SPI_I2S_ReceiveData
        16   -> SPI_I2S_SendData
      16   SPI_FLASH_WriteDisable
        16   -> GPIO_ResetBits
         0   -> GPIO_SetBits
        16   -> SPI_I2S_GetFlagStatus
        16   -> SPI_I2S_ReceiveData
        16   -> SPI_I2S_SendData
      16   SPI_FLASH_WriteEnable
        16   -> GPIO_ResetBits
         0   -> GPIO_SetBits
        16   -> SPI_I2S_GetFlagStatus
        16   -> SPI_I2S_ReceiveData
        16   -> SPI_I2S_SendData


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable9
       4  ??DataTable9_1
       4  ??DataTable9_2
       4  ??DataTable9_3
       1  FLASH_Statusx
     214  SPI_FLASH_BufferRead
     248  SPI_FLASH_Init
     372  SPI_FLASH_PageWrite
      46  SPI_FLASH_ReadByte
      52  SPI_FLASH_SendByte
      52  SPI_FLASH_SendHalfWord
     136  SPI_FLASH_StartReadSequence
     110  SPI_FLASH_WaitForWriteEnd
      72  SPI_FLASH_WriteDisable
      72  SPI_FLASH_WriteEnable

 
     1 byte  in section .bss
 1 390 bytes in section .text
 
 1 390 bytes of CODE memory
     1 byte  of DATA memory

Errors: none
Warnings: none
