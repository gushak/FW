###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.1.11437/W32 for ARM       24/Apr/2019  16:42:18
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\12.물섭취량조사기\5.Source\Project\backup\STM32F103\hw_control.c
#    Command line =  
#        D:\12.물섭취량조사기\5.Source\Project\backup\STM32F103\hw_control.c -D
#        USE_STDPERIPH_DRIVER -D STM32F10X_MD -D USE_STM3210C_EVAL -lcN
#        D:\12.물섭취량조사기\5.Source\Project\backup\STM32F103\STM3210C-EVAL\List
#        --diag_suppress pa082 -o
#        D:\12.물섭취량조사기\5.Source\Project\backup\STM32F103\STM3210C-EVAL\Obj
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\INC\c\DLib_Config_Full.h" -I
#        D:\12.물섭취량조사기\5.Source\Project\backup\STM32F103\ -I
#        D:\12.물섭취량조사기\5.Source\Project\backup\STM32F103\..\..\..\Libraries\CMSIS\CM3\CoreSupport\
#        -I
#        D:\12.물섭취량조사기\5.Source\Project\backup\STM32F103\..\..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\
#        -I
#        D:\12.물섭취량조사기\5.Source\Project\backup\STM32F103\..\..\..\Libraries\STM32F10x_StdPeriph_Driver\inc\
#        -I
#        D:\12.물섭취량조사기\5.Source\Project\backup\STM32F103\..\..\..\Utilities\STM32_EVAL\
#        -I
#        D:\12.물섭취량조사기\5.Source\Project\backup\STM32F103\..\..\..\Utilities\STM32_EVAL\Common\
#        -I
#        D:\12.물섭취량조사기\5.Source\Project\backup\STM32F103\..\..\..\Utilities\STM32_EVAL\STM3210C_EVAL\
#        -Ohs --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.5\arm\CMSIS\Include\"
#    Locale       =  Korean_Korea.949
#    List file    =  
#        D:\12.물섭취량조사기\5.Source\Project\backup\STM32F103\STM3210C-EVAL\List\hw_control.lst
#    Object file  =  
#        D:\12.물섭취량조사기\5.Source\Project\backup\STM32F103\STM3210C-EVAL\Obj\hw_control.o
#
###############################################################################

D:\12.물섭취량조사기\5.Source\Project\backup\STM32F103\hw_control.c
      1          #include "hw_control.h"
      2          
      3          RCC_ClocksTypeDef clocks;
      4          
      5          volatile uint32_t sysTickUptime = 0;
      6          volatile uint32_t Tflag_1ms = 0;
      7          
      8          void SysTick_Handler(void)         
      9          {
     10          	sysTickUptime++;
     11          	Tflag_1ms++;
     12          	timer_check();
     13          }
     14          
     15          void cycleCounterInit(void)
     16          {
     17          	RCC_GetClocksFreq(&clocks);
     18          	SysTick_Config(clocks.SYSCLK_Frequency / 1000);	
     19          }
     20          
     21          uint32_t micros(void)
     22          {
     23              register uint32_t ms, cycle_cnt;
     24              do {
     25                  ms = sysTickUptime;
     26                  cycle_cnt = SysTick->VAL;
     27              } while (ms != sysTickUptime);
     28              return (ms * 1000) + (72000 - cycle_cnt) / 72;
     29          }
     30          
     31          uint32_t millis(void)
     32          {
     33              return sysTickUptime;
     34          }
     35          
     36          void Delay(uint32_t ms)
     37          {
     38          	 uint32_t now = Tflag_1ms;
     39               while ((Tflag_1ms - now) < ms);
     40          }
     41          
     42          static void delay_t(uint32_t t)
     43          {
     44          	while(t--)
     45          	{
     46          		asm volatile ("nop");
     47          		asm volatile ("nop");
     48          	}
     49          }
     50          
     51          void delay_us(uint32_t t)
     52          {
     53          	while(t--) delay_t(11);
     54          }
     55          
     56          void delay_ms(uint32_t xx)
     57          {
     58          	while(xx--) delay_us(1000);
     59          }
     60          
     61          extern void timer_1000ms_loop(void);
     62          extern void timer_100ms_loop(void);
     63          extern void timer_10ms_loop(void);
     64          
     65          
     66          void timer_check(void)
     67          {
     68          	//loop = 1ms
     69          	static uint16_t tick_10ms = 10,  tick_100ms=100, tick_1000ms=1000;
     70          
     71          	if(tick_10ms == 0) //10mS
     72          	{		
     73          		tick_10ms = 9;
     74          		timer_10ms_loop();
     75          	} else {
     76          		tick_10ms--;		
     77          	}	
     78          
     79          	if(tick_100ms == 0)
     80          	{	
     81          		tick_100ms = 99;
     82          		timer_100ms_loop();
     83          	} else {
     84          		tick_100ms--;
     85          	}   
     86          	
     87          	if(tick_1000ms == 0) 
     88          	{	
     89          		tick_1000ms = 999;
     90          		timer_1000ms_loop();
     91          	} else {
     92          		tick_1000ms--;
     93          	}  
     94          }
     95          
     96          void NVIC_Configuration(void)               
     97          {
     98          	NVIC_InitTypeDef NVIC_InitStructure;
     99          	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
    100          
    101          	/* Enable and set EXTI9_5 Interrupt to the lowest priority */
    102          	NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
    103          	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
    104          	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    105          	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    106          	NVIC_Init(&NVIC_InitStructure);
    107          	
    108          	NVIC_InitStructure.NVIC_IRQChannel = EXTI1_IRQn;
    109          	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 3; 
    110          	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; 
    111          	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    112          	NVIC_Init(&NVIC_InitStructure);
    113          	
    114          
    115          	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
    116          	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 4;
    117          	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    118          	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    119          	NVIC_Init(&NVIC_InitStructure); 
    120          	
    121          	
    122          	NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
    123          	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 5;
    124          	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    125          	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    126          	NVIC_Init(&NVIC_InitStructure); 
    127          	
    128          	
    129          	NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;
    130          	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 6;
    131          	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    132          	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    133          	NVIC_Init(&NVIC_InitStructure); 
    134          
    135          	NVIC_SetVectorTable(NVIC_VectTab_FLASH,0x0);
    136          }
    137          
    138          void GPIO_Configuration(void)  
    139          {
    140          
    141          	GPIO_InitTypeDef GPIO_InitStructure;
    142          	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOB | RCC_APB2Periph_GPIOC | RCC_APB2Periph_AFIO, ENABLE);
    143          
    144          	GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable, ENABLE);
    145          	
    146          	//GPIO_PinRemapConfig(GPIO_Remap_SPI1, ENABLE);
    147          	//LED
    148          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
    149          	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    150          	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8|GPIO_Pin_9;
    151          	GPIO_Init(GPIOB, &GPIO_InitStructure);	
    152          	LED_OFF;
    153          	LED1_OFF;
    154          
    155          	//SW
    156          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
    157          	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
    158          	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3 |GPIO_Pin_4 | GPIO_Pin_5 ;
    159          	GPIO_Init(GPIOB, &GPIO_InitStructure);
    160          
    161          	//INPUT 5:sensor/6:input1,7:input2
    162          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
    163          	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
    164          	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 ;	
    165          	GPIO_Init(GPIOC, &GPIO_InitStructure);
    166          
    167          	//GPIO OUTPUT-A(FET)
    168          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
    169          	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    170          	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;
    171          	GPIO_Init(GPIOA, &GPIO_InitStructure);
    172          	
    173          	//GPIO OUTPUT-B(FET)
    174          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
    175          	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    176          	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0| GPIO_Pin_1;		
    177          	GPIO_Init(GPIOB, &GPIO_InitStructure);
    178          
    179          		
    180          	FET1_OFF;
    181          	FET2_OFF;
    182          	FET3_OFF;
    183          	FET4_OFF;
    184          	
    185          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
    186          	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    187          	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3 ;		
    188          	GPIO_Init(GPIOC, &GPIO_InitStructure);
    189          
    190          	
    191          	FET5_OFF;
    192          		
    193          }
    194          
    195          
    196          void setup()
    197          {
    198          	cycleCounterInit();
    199          	RTC_Init();
    200          	GPIO_Configuration();
    201          	LCD_init();
    202          	EXTI9_0_Config();		
    203          	NVIC_Configuration();
    204          	UART_init();	
    205          	lll_eeprom_init();		//EEPROM
    206          	SPI_FLASH_Init();		//MRAM
    207          
    208          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   Delay
      24   GPIO_Configuration
        24   -> GPIO_Init
        24   -> GPIO_PinRemapConfig
        24   -> RCC_APB2PeriphClockCmd
       8   NVIC_Configuration
         8   -> NVIC_Init
         8   -> NVIC_PriorityGroupConfig
         8   -> NVIC_SetVectorTable
       8   SysTick_Handler
         0   -> timer_1000ms_loop
         8   -> timer_100ms_loop
         8   -> timer_10ms_loop
       8   cycleCounterInit
         8   -> RCC_GetClocksFreq
      16   delay_ms
        16   -> delay_t
       0   delay_t
       8   delay_us
         8   -> delay_t
       0   micros
       0   millis
       8   setup
         8   -> EXTI9_0_Config
         8   -> GPIO_Configuration
         8   -> LCD_init
         8   -> NVIC_Configuration
         8   -> RCC_GetClocksFreq
         8   -> RTC_Init
         0   -> SPI_FLASH_Init
         8   -> UART_init
         8   -> lll_eeprom_init
       8   timer_check
         0   -> timer_1000ms_loop
         8   -> timer_100ms_loop
         8   -> timer_10ms_loop


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_2
       4  ??DataTable7_3
       4  ??DataTable7_4
       4  ??DataTable7_5
       4  ??DataTable7_6
       4  ??DataTable7_7
       4  ??DataTable7_8
      14  Delay
     220  GPIO_Configuration
     176  NVIC_Configuration
      82  SysTick_Handler
      20  clocks
      48  cycleCounterInit
      30  delay_ms
      50  delay_t
      18  delay_us
      36  micros
       6  millis
      82  setup
      16  tick_10ms
          tick_100ms
          tick_1000ms
          sysTickUptime
          Tflag_1ms
      70  timer_check

 
  20 bytes in section .bss
  16 bytes in section .data
 868 bytes in section .text
 
 868 bytes of CODE memory
  36 bytes of DATA memory

Errors: none
Warnings: none
